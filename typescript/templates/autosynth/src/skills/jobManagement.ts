/**
 * Job Management Skill
 * Orchestrates all job-related operations (create, read, delete)
 */

import { z } from 'zod';
import { defineSkill } from 'arbitrum-vibekit-core';
import { createTimeJobTool } from '../tools/createTimeJob.js';
import { createEventJobTool } from '../tools/createEventJob.js';
import { createConditionJobTool } from '../tools/createConditionJob.js';
import { getJobsTool } from '../tools/getJobs.js';
import { deleteJobTool } from '../tools/deleteJob.js';
import { getUserDataTool } from '../tools/getUserData.js';

const JobManagementInputSchema = z.object({
  operation: z
    .enum(['create', 'list', 'get', 'delete', 'status'])
    .default('list')
    .describe(
      'Job management operation: create (new job), list (all jobs), get (specific job), delete (remove job), status (check job)'
    ),
  jobType: z
    .enum(['time', 'event', 'condition'])
    .optional()
    .describe(
      'Type of job for CREATE operations only: time (scheduled), event (blockchain events), condition (API conditions)'
    ),
  jobId: z
    .string()
    .optional()
    .describe(
      'Job ID for GET/DELETE operations ONLY. Do not provide for CREATE operations - jobId is auto-generated'
    ),
  jobDetails: z
    .record(z.any())
    .optional()
    .describe(
      'Job configuration object for CREATE operations containing all job parameters like jobTitle, scheduleTypes (array), timeInterval, cronExpression, specificSchedule, contracts, etc. Required only for CREATE operations.'
    ),
  userAddress: z
    .string()
    .regex(/^0x[a-fA-F0-9]{40}$/)
    .optional()
    .describe(
      'User wallet address for signing transactions. Auto-extracted from context if not provided.'
    ),
});

export const jobManagementSkill = defineSkill({
  id: 'job-management-skill',
  name: 'jobManagement',
  description:
    'Job automation management for TriggerX platform. Use operation=list to show all jobs, operation=get for specific job, operation=delete to remove jobs, and operation=create to make new jobs. IMPORTANT: For CREATE operations, DO NOT provide jobId - it is auto-generated by the system. JobId is ONLY needed for GET/DELETE operations on existing jobs.',

  tags: ['automation', 'scheduling', 'blockchain', 'triggers', 'jobs'],
  examples: [
    'CREATE: operation=create, jobType=time, jobDetails={jobTitle, scheduleTypes, timeInterval, targetContractAddress...} (NO jobId needed - auto-generated)',
    'CREATE MULTI-SCHEDULE: operation=create, jobType=time, jobDetails={jobTitle:"SDK Test Time Job", scheduleTypes:["interval","cron","specific"], timeInterval:33, cronExpression:"0 0 * * *", specificSchedule:"2025-01-01 00:00:00", timezone:"Asia/Calcutta", targetContractAddress:"0xDE85FE97A73B891f12CbBF1210cc225AF332C90B", targetFunction:"helloWorld", arguments:["3"], abi:"[...]"} (NO jobId - auto-generated)',
    'CREATE: operation=create, jobType=event, jobDetails={jobTitle, triggerContractAddress, triggerEvent...} (NO jobId needed - auto-generated)',
    'CREATE: operation=create, jobType=condition, jobDetails={jobTitle, conditionType, valueSourceUrl...} (NO jobId needed - auto-generated)',
    'LIST: operation=list (no other parameters needed)',
    'Show me all my automated jobs and their current status',
    'List all my jobs',
    'What jobs do I have running?',
    'Display my automation jobs',
    'GET: operation=get, jobId=abc123 (jobId ONLY for existing jobs)',
    'DELETE: operation=delete, jobId=abc123 (jobId ONLY for existing jobs)',
  ],

  inputSchema: JobManagementInputSchema,
  tools: [
    // Zero-arg helper to make "show my jobs" easier to invoke
    {
      name: 'listJobs',
      description:
        'List all your automated jobs and their current status. Use this for prompts like: "show my jobs", "list my automations", "what jobs do I have", "display my automation jobs".',
      parameters: z.object({}),
      execute: async (_args, context) => {
        // Delegate to getJobsTool with no jobId
        return await getJobsTool.execute({}, context as any);
      },
    },
    createTimeJobTool,
    createEventJobTool,
    createConditionJobTool,
    getJobsTool,
    deleteJobTool,
    getUserDataTool,
  ],

  // Let LLM orchestrate the tools based on user intent
  // No manual handler - uses LLM orchestration by default
});
